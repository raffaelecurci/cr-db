{
   "@class":"cr.shared.FlawList",
   "flaws":[
      {
         "loc":5654,
         "issueid":54,
         "line":59,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":8,
         "scope":"com.ryanair.etwapi.auth.controller.AuthenticationController",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.AuthResponse createAuthenticationToken(model.AuthRequest, javax.servlet.http.HttpServletResponse)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/controller/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":14,
         "line":74,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":94,
         "scope":"com.ryanair.etwapi.auth.controller.AuthenticationController",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.AuthResponse createAuthenticationToken(model.AuthRequest, javax.servlet.http.HttpServletResponse)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/controller/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":33,
         "line":103,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":24,
         "scope":"com.ryanair.etwapi.auth.controller.AuthenticationController",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void validateCredentials(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/controller/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variable crewCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":48,
         "line":108,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":73,
         "scope":"com.ryanair.etwapi.auth.controller.AuthenticationController",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void validateCredentials(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/controller/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variable crewCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":20,
         "line":63,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":55,
         "scope":"com.ryanair.etwapi.auth.utils.AuthenticationUtils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationUtils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean validateUserInCrewDock(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":49,
         "line":66,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":77,
         "scope":"com.ryanair.etwapi.auth.utils.AuthenticationUtils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationUtils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean validateUserInCrewDock(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":17,
         "line":81,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":58,
         "scope":"com.ryanair.etwapi.auth.utils.AuthenticationUtils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationUtils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean validateUserInCognito(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable username. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":24,
         "line":85,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":89,
         "scope":"com.ryanair.etwapi.auth.utils.AuthenticationUtils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AuthenticationUtils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean validateUserInCognito(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/auth/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variable username. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":6,
         "line":86,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":52,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.lang.String uploadAvatar(org.springframework.web.multipart.MultipartFile, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":12,
         "line":92,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":76,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.lang.String uploadAvatar(org.springframework.web.multipart.MultipartFile, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to error() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":4,
         "line":112,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":35,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void deleteAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variable avatarFileName. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":45,
         "line":115,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":79,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void deleteAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":32,
         "line":146,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":51,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.S3File getS3File(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":5,
         "line":151,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":70,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.S3File getS3File(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":25,
         "line":156,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":91,
         "scope":"com.ryanair.etwapi.common.utils.AwsS3Utils",
         "id":null,
         "categoryid":21,
         "sourcefile":"AwsS3Utils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.S3File getS3File(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":36,
         "line":131,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":51,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.CrewMemberResponseDto getCrewMember(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":46,
         "line":146,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":23,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getCrewAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":16,
         "line":168,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":39,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.CrewMemberResponseDto uploadAvatar(java.lang.String, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":13,
         "line":175,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":94,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.CrewMemberResponseDto uploadAvatar(java.lang.String, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":38,
         "line":182,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":31,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.CrewMemberResponseDto deleteAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":10,
         "line":186,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":93,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.CrewMemberResponseDto deleteAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":7,
         "line":205,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":8,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto getMessages(java.lang.String, java.lang.String, java.lang.Boolean)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":26,
         "line":205,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":8,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto getMessages(java.lang.String, java.lang.String, java.lang.Boolean)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to debug() contains tainted data from the variable lastSyncTimestamp. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":15,
         "line":210,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":52,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto getMessages(java.lang.String, java.lang.String, java.lang.Boolean)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":28,
         "line":236,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":12,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.List getRepliesBatch(java.lang.String, java.util.List)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":53,
         "line":254,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":93,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.List getRepliesBatch(java.lang.String, java.util.List)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":29,
         "line":262,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":80,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean requestReplyOfBadMessage(java.util.Set, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":35,
         "line":286,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":5,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto setMessagesAsRead(java.lang.String, model.dto.ReadingConfirmationsDto, org.springframework.validation.BindingResult)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":58,
         "line":303,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":93,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto setMessagesAsRead(java.lang.String, model.dto.ReadingConfirmationsDto, org.springframework.validation.BindingResult)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":30,
         "line":325,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":20,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity setMessagesAsLiked(java.lang.String, model.dto.MessageLikesWrapperDto)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":52,
         "line":371,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":18,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.ReplyDto sendReply(java.lang.String, int, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":9,
         "line":375,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":29,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.ReplyDto sendReply(java.lang.String, int, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":41,
         "line":410,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":97,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.ReplyDto sendReply(java.lang.String, int, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":1,
         "line":447,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":8,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.List sendReplyBatch(java.lang.String, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":18,
         "line":466,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":94,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.List sendReplyBatch(java.lang.String, org.springframework.web.multipart.MultipartHttpServletRequest)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":43,
         "line":487,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":11,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getMessageAttachment(java.lang.String, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":11,
         "line":499,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":56,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getMessageAttachment(java.lang.String, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":27,
         "line":531,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":7,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getReplyAttachment(java.lang.String, java.lang.Integer, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":21,
         "line":539,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":26,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getReplyAttachment(java.lang.String, java.lang.Integer, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":34,
         "line":546,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":45,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getReplyAttachment(java.lang.String, java.lang.Integer, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":39,
         "line":556,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":72,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getReplyAttachment(java.lang.String, java.lang.Integer, java.lang.Integer, int)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":23,
         "line":584,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":6,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"org.springframework.http.ResponseEntity getUserAvatar(java.lang.String, java.lang.Integer)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":51,
         "line":615,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":78,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.ReplyRequestDto getValidatedReplyDto(model.entity.CrewMember, int, java.lang.String  [])",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to javax.servlet.servletrequest.getparametervalues.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":56,
         "line":665,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":40,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Date getUtcDateMessagesSince(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to error() contains tainted data from the variable lastSyncTimestamp. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":8,
         "line":665,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.error",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":40,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Date getUtcDateMessagesSince(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to error() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":22,
         "line":693,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":88,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto getMessageUpdate(java.lang.String, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":50,
         "line":707,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":67,
         "scope":"com.ryanair.etwapi.rest.CrewController",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewController.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"model.dto.MessagesWrapperDto getPinnedMessages(java.lang.String, boolean)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/rest/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variable crewMemberCode. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":3,
         "line":62,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":41,
         "scope":"com.ryanair.etwapi.service.CrewMemberServiceImpl",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewMemberServiceImpl.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Optional uploadAvatar(java.lang.String, org.springframework.web.multipart.MultipartFile)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/service/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":2,
         "line":65,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":69,
         "scope":"com.ryanair.etwapi.service.CrewMemberServiceImpl",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewMemberServiceImpl.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Optional uploadAvatar(java.lang.String, org.springframework.web.multipart.MultipartFile)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/service/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":40,
         "line":89,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":50,
         "scope":"com.ryanair.etwapi.service.CrewMemberServiceImpl",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewMemberServiceImpl.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Optional deleteAvatar(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/service/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to info() contains tainted data from the variable crewMember.getAvatarFilename(). The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":37,
         "line":115,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.info",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":62,
         "scope":"com.ryanair.etwapi.service.CrewMemberServiceImpl",
         "id":null,
         "categoryid":21,
         "sourcefile":"CrewMemberServiceImpl.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void setCrewMembersAvatar(model.entity.CrewMember, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/service/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The third argument to info() contains tainted data from the variable uploadedFilename. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":19,
         "line":59,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":50,
         "scope":"com.ryanair.etwapi.common.utils.DateTimeUtils",
         "id":null,
         "categoryid":21,
         "sourcefile":"DateTimeUtils.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.Date fromISO8601String(java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variable dateString. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":55,
         "line":97,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":64,
         "scope":"com.ryanair.etwapi.config.GlobalExceptionHandler",
         "id":null,
         "categoryid":21,
         "sourcefile":"GlobalExceptionHandler.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"ExceptionJsonInfo createExceptionJsonInfo(java.lang.String, java.lang.Exception, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/config/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to warn() contains tainted data from the variable ex. The tainted data originated from earlier calls to javax.servlet.http.httpservletrequest.getrequesturl, and annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":42,
         "line":97,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.warn",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":64,
         "scope":"com.ryanair.etwapi.config.GlobalExceptionHandler",
         "id":null,
         "categoryid":21,
         "sourcefile":"GlobalExceptionHandler.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"ExceptionJsonInfo createExceptionJsonInfo(java.lang.String, java.lang.Exception, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/config/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.warn() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to warn() contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.httpservletrequest.getrequesturl, and annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":57,
         "line":23,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":88,
         "scope":"com.ryanair.etwapi.interceptor.LogInterceptor",
         "id":null,
         "categoryid":21,
         "sourcefile":"LogInterceptor.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"boolean preHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/interceptor/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from earlier calls to javax.servlet.http.httpservletrequest.getmethod, and javax.servlet.http.httpservletrequest.getrequesturi.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":31,
         "line":38,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":90,
         "scope":"com.ryanair.etwapi.interceptor.LogInterceptor",
         "id":null,
         "categoryid":21,
         "sourcefile":"LogInterceptor.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"void afterCompletion(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, java.lang.Exception)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/interceptor/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.httpservletrequest.getrequesturi.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":47,
         "line":73,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"org.slf4j.Logger.debug",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"The acronym CRLF stands for \"Carriage Return, Line Feed\" and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  ",
         "score":"82",
         "cia_impact":"npp",
         "exploitLevel":1,
         "functionrelativelocation":94,
         "scope":"com.ryanair.etwapi.repository.MessageReplyRepositoryImpl",
         "id":null,
         "categoryid":21,
         "sourcefile":"MessageReplyRepositoryImpl.java",
         "severity":3,
         "cwename":"Improper Output Neutralization for Logs",
         "functionprototype":"java.util.List getReplies(java.lang.Long, java.util.Date, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":117,
         "pcirelated":false,
         "cwe_description":"A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/repository/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.",
         "id_commit":null,
         "categoryname":"CRLF Injection",
         "flaw_description":"This call to org.slf4j.Logger.debug() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The second argument to debug() contains tainted data from the variables (new Object\\[...\\]). The tainted data originated from an earlier call to javax.persistence.typedquery.getresultlist.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (http://www.owasp.org/index.php/Log_injection) \r\nWASC (http://webappsec.pbworks.com/Improper-Output-Handling)\r\n\r\n"
      },
      {
         "loc":5654,
         "issueid":44,
         "line":95,
         "rating":"C",
         "jenkinsBuild":31,
         "type":"java.io.File.!operator_javanewinit",
         "commitHash":"4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "category_description":"Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path.\nWhen an application improperly cleanses special character sequences in user-supplied filenames, a path traversal (or directory traversal) vulnerability may occur.  For example, an attacker could specify a filename such as \"../../etc/passwd\", which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view.",
         "score":"82",
         "cia_impact":"ppn",
         "exploitLevel":0,
         "functionrelativelocation":62,
         "scope":"com.ryanair.etwapi.common.utils.FileUtils",
         "id":null,
         "categoryid":1,
         "sourcefile":"FileUtils.java",
         "severity":3,
         "cwename":"External Control of File Name or Path",
         "functionprototype":"java.io.File convertMultipartToFile(org.springframework.web.multipart.MultipartFile, java.lang.String)",
         "analysis_size_bytes":163403,
         "affects_policy_compliance":false,
         "cweid":73,
         "pcirelated":false,
         "cwe_description":"This call contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any.",
         "count":1,
         "sourcefilepath":"com/ryanair/etwapi/common/utils/",
         "cwepcirelated":false,
         "version":"jenkinsJava-#31-4afac4668cb9f38d7acb1b1d646181cf1cdb8e2b",
         "recommendation_description":"Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous.",
         "id_commit":null,
         "categoryname":"Directory Traversal",
         "flaw_description":"This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable outputFilename. The tainted data originated from an earlier call to annotationvirtualcontroller.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (http://cwe.mitre.org/data/definitions/73.html) \r\nWASC (http://webappsec.pbworks.com/Path-Traversal)\r\n\r\n"
      }
   ]
}